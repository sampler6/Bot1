import atexit
import os
import asyncio

import kb
from kb import question_list, get_question_list_kb, get_admin_kb
from user import register, users, is_registered, save, Timetable
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import CallbackQuery, InputFile, InputMediaPhoto, ContentType, MediaGroup
from dotenv import load_dotenv
from aiogram.dispatcher import filters

load_dotenv()
bot = Bot(os.getenv('TOKEN'))
admin = int(os.getenv('ADMIN'))
dp = Dispatcher(bot, loop=asyncio.get_event_loop())


@dp.message_handler(commands=['start'])
async def on_command_start(message: types.Message):
    uid = int(message.from_user.id)
    await bot.send_message(uid, "–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏"
                                " –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")


@dp.message_handler(commands=['register'])
async def reg(message: types.Message):
    uid = int(message.chat.id)
    users["awaiting_name"][uid] = True
    await bot.send_message(uid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ –§–ò–û —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")


@dp.message_handler(commands="help")
async def help(message: types.Message):
    uid = int(message.chat.id)
    if not is_registered[uid]:
        await bot.send_message(uid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return
    mesg = await bot.send_message(uid, "–ß—Ç–æ –í–∞—Å –≤–æ–ª–Ω—É–µ—Ç?", reply_markup=get_question_list_kb(uid))
    users["last_kb"][uid] = mesg.message_id


@dp.callback_query_handler(text_startswith="answer|")
async def ans(call: types.CallbackQuery):
    uid = int(call.message.chat.id)
    await bot.send_message(uid, question_list[call.data.split('|')[1]])
    await bot.delete_message(uid, users["last_kb"][uid])


@dp.message_handler(commands="record")
async def record(message: types.Message):
    uid = int(message.chat.id)
    if not is_registered[uid]:
        await bot.send_message(uid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return
    if not users["accepted"][uid]:
        await bot.send_message(uid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
        return
    await bot.send_message(uid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –í–∞—Å –≤—Ä–µ–º—è", reply_markup=kb.get_Timetable_kb())


@dp.callback_query_handler(text_startswith="day|")
async def recordtime(call: types.CallbackQuery):
    day = call.data.split("|")[1]
    await call.message.edit_reply_markup(kb.get_Timetable_kb(day))


@dp.callback_query_handler(text_startswith="time|")
async def recordtim(call: types.CallbackQuery):
    time, day = call.data.split("|")[1], call.data.split("|")[2]
    await call.message.delete_reply_markup()
    await bot.send_message(call.message.chat.id, "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —É –≤–∞—Å –∂–∞–ª–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
    users["awaiting_question"] = f"{time}|{day}"


@dp.callback_query_handler(text_startswith="acp|")
async def accept(call: types.CallbackQuery):
    uid = int(call.data.split("|")[1])
    users["accepted"][uid] = True
    await bot.send_message(uid, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")
    await call.message.delete_reply_markup()


@dp.callback_query_handler(text_startswith="dec|")
async def accept(call: types.CallbackQuery):
    uid = call.data.split("|")[1]
    users["accepted"][uid] = False
    await bot.send_message(uid, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ")
    await call.message.delete_reply_markup()


@dp.message_handler(text_startswith="/add_date")
async def add_date(message: types.message):
    uid = int(message.chat.id)
    if uid != admin:
        return
    command = message.text.split()
    if command[1] not in Timetable:
        Timetable[command[1]] = dict()
    Timetable[command[1]][command[2]] = "–°–≤–æ–±–æ–¥–Ω–æ"


@dp.message_handler(commands='get_timetable')
async def get_timetable(message: types.Message):
    await bot.send_message(admin, str(Timetable))


@dp.message_handler(content_types=['text'])
async def proccesing_messages(message: types.Message):
    global users
    uid = int(message.chat.id)
    if users["awaiting_name"][uid]:
        users["awaiting_name"][uid] = False
        await dp.loop.create_task(register(uid, message.text))
        await bot.send_message(admin, f"{users['real_names'][uid]} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", reply_markup=get_admin_kb(uid))
        await bot.send_message(uid, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É")
        return
    if users["awaiting_question"] != "0":
        time, day = users["awaiting_question"].split("|")
        Timetable[day][time] = users["real_names"][uid] + ":" + message.text
        await bot.send_message(uid, f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –Ω–∞ {day} {time}. –ë—É–¥–µ–º –∂–¥–∞—Ç—å –í–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É –ø—Ä–æ—Å–ø–µ–∫—Ç –õ–µ–Ω–∏–Ω–∞ 33, 116 –∫–∞–±–∏–Ω–µ—Ç üòå")
        return

    await bot.send_message(uid, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")


if __name__ == '__main__':
    atexit.register(save)
    executor.start_polling(dp)
